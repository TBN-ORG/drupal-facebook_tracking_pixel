<?php

/**
 * @file
 * Contains tests for the Facebook Tracking Pixel module.
 */

/**
 * Test case.
 */
class FacebookTrackingPixelTestCase extends DrupalWebTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return [
      'name' => 'General Test',
      'description' => 'Place tracking pixel onto a site and control events.',
      'group' => 'Facebook Tracking Pixel',
    ];
  }

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    parent::setUp(['facebook_tracking_pixel']);

    // Create a generic authenticated user.
    $this->web_user = $this->drupalCreateUser();

    // Create an admin user and log them in.
    $this->admin_user = $this->drupalCreateUser([
      'administer facebook tracking pixels',
      'access content',
      'create page content',
      'edit own page content',
      'administer url aliases',
      'create url aliases',
    ]);
    $this->drupalLogin($this->admin_user);


    // Test Basecode ID.
    db_insert('facebook_tracking_pixel_base_codes')
      ->fields([
        'base_code_name' => 'Test Basecode',
        'base_code_fbid' => '123123123',
        'base_code_global' => 1,
        'weight' => 10,
      ])
      ->execute();

    // Retreieve the base id created.
    $this->basecodeid = db_select('facebook_tracking_pixel_base_codes', 'c')
      ->fields('c', ['base_code_id'])
      ->execute()
      ->fetchField();

    // Create a Node with a path alias for testing.
    // Create node to edit.
    $node = $this->drupalCreateNode();
    $this->testFacebookTrackingPixelNodeNID = $node->nid;


    $this->assertTrue(!empty($node->nid), t('A basic page has been created with node ID %nid and title %title and path alias', [
      '%nid' => $node->nid,
      '%title' => $node->title,
    ]), t('Facebook Tracking Pixel'));

    // Create alias for the node just created above.
    $edit = [];
    $edit['source'] = 'node/' . $node->nid;
    $edit['alias'] = 'nodetest';
    $this->drupalPost('admin/config/search/path/add', $edit, t('Save'));
    $this->testFacebookTrackingPixelNodeAlias = $edit['alias'];

    // Visit the system path for the node and confirm a cache entry is
    // created.
    cache_clear_all('*', 'cache_path', TRUE);
    $this->drupalGet($edit['source']);
    $this->assertTrue(cache_get($edit['source'], 'cache_path'), 'Cache entry was created.');

    // Visit the alias for the node and confirm a cache entry is created.
    cache_clear_all('*', 'cache_path', TRUE);
    $this->drupalGet($edit['alias']);
    $this->assertTrue(cache_get($edit['source'], 'cache_path'), 'Cache entry was created.');
  }

  /**
   * Attempt to add a path tracking item to the node created using path alias.
   */
  public function testFacebookTrackingPixelPathItemNodeExisting() {
    // Test to add a path item to the existing node created in this test.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $this->testFacebookTrackingPixelNodeAlias;
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');


    // Attempt to add a path item for the same path as above
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $this->testFacebookTrackingPixelNodeAlias;
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('You cannot add a duplicate event to the same path and base code.'), t('Adding path with same alias should fail.'), 'FBTrkPx');
  }

}
