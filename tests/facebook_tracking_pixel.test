<?php

/**
 * @file
 * Contains tests for the Facebook Tracking Pixel module.
 */

/**
 * Test case.
 */
class FacebookTrackingPixelTestCase extends DrupalWebTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return [
      'name' => 'General Test',
      'description' => 'Place tracking pixel onto a site and control events.',
      'group' => 'Facebook Tracking Pixel',
    ];
  }

  /**
   * Node ID created during testing.
   *
   * @var string
   */
  protected $testFacebookTrackingPixelNodeNID = '';

  /**
   * Node alias created during testing.
   *
   * @var string
   */
  protected $testFacebookTrackingPixelNodeAlias = '';

  /**
   * Generic web user.
   *
   * @var array
   */
  protected $web_user = [];

  /**
   * Adminstrative user.
   *
   * @var array
   */
  protected $admin_user = [];

  /**
   * Facebook Basecode database ID number.
   *
   * @var string
   */
  protected $basecodeid = '';

  /**
   * Test base code FB ID number.
   * @var string
   */
  protected $basecodefbid = '';

  /**
   * Implements setUp().
   */
  function setUp() {
    // Call the parent with an array of modules to enable for the test.
    $modules[] = 'facebook_tracking_pixel';
    parent::setUp($modules);

    // Create a generic authenticated user.
    $this->web_user = $this->drupalCreateUser();

    // Create an admin user and log them in.
    $this->admin_user = $this->drupalCreateUser([
      'administer facebook tracking pixels',
      'access content',
      'create page content',
      'edit own page content',
      'administer url aliases',
      'create url aliases',
      'administer users',
      'administer permissions',
    ]);
    $this->drupalLogin($this->admin_user);
    // Set the role as admin for the admin user just created.
    $this->drupalPost('user/' . $this->admin_user->uid . '/edit', ['roles[3]' => TRUE], t('Save'));

    $this->basecodefbid = '123123123';
    // Test Basecode ID.
    db_insert('facebook_tracking_pixel_base_codes')
      ->fields([
        'base_code_name' => 'Test Basecode',
        'base_code_fbid' => $this->basecodefbid,
        'base_code_global' => 1,
        'weight' => 10,
      ])
      ->execute();

    // Retreieve the base id created.
    $this->basecodeid = db_select('facebook_tracking_pixel_base_codes', 'c')
      ->fields('c', ['base_code_id'])
      ->execute()
      ->fetchField();

    // Create a Node with a path alias for testing.
    // Create node to edit.
    $node = $this->drupalCreateNode();
    $this->testFacebookTrackingPixelNodeNID = $node->nid;


    $this->assertTrue(!empty($node->nid), t('A basic page has been created with node ID %nid and title %title and path alias', [
      '%nid' => $node->nid,
      '%title' => $node->title,
    ]), t('Facebook Tracking Pixel'));

    // Create alias for the node just created above.
    $edit = [];
    $edit['source'] = 'node/' . $node->nid;
    $edit['alias'] = 'nodetest';
    $this->drupalPost('admin/config/search/path/add', $edit, t('Save'));
    $this->testFacebookTrackingPixelNodeAlias = $edit['alias'];

    // Visit the system path for the node and confirm a cache entry is
    // created.
    cache_clear_all('*', 'cache_path', TRUE);
    $this->drupalGet($edit['source']);
    $this->assertTrue(cache_get($edit['source'], 'cache_path'), 'Cache entry was created.');

    // Visit the alias for the node and confirm a cache entry is created.
    cache_clear_all('*', 'cache_path', TRUE);
    $this->drupalGet($edit['alias']);
    $this->assertTrue(cache_get($edit['source'], 'cache_path'), 'Cache entry was created.');
  }

  /**
   * Test basecode functionality.
   */
  public function testFacebookTrackingPixelBasePixel() {
    // Submit a new basecode.
    $edit = [];
    $edit['name'] = $this->randomName(8);
    $edit['fbid'] = 12314512312;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('Facebook Base Tracking Code Added'), t('Add new base code through the admin UI'));

    // Submit a duplicate item using the same FB basecode ID.
    $edit['name'] = $this->randomName(8);
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/base_codes', $edit, t('Add'));
    $this->assertText(t('You only need to add a base tracking code once.'), t('Add duplicate base code through the admin UI'));

  }

  /**
   * Attempt to add a path tracking item to the node created using path alias.
   */
  public function testFacebookTrackingPixelPathItemNodes() {
    // Test to add a path item to the existing node created in this test.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $this->testFacebookTrackingPixelNodeAlias;
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');


    // Attempt to add a path item for the same path as above using alias path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = $this->testFacebookTrackingPixelNodeAlias;
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('You cannot add a duplicate event to the same path and base code.'), t('Adding path with same alias should fail. This test should pass.'), 'FBTrkPx');

    // Attempt to add a path item for the same path as above using system path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $this->assert(TRUE, 'Using Node ID ' . $this->testFacebookTrackingPixelNodeNID, 'FBTrkPx');
    $path = 'node/' . $this->testFacebookTrackingPixelNodeNID;
    $edit['event_path'] = $path;
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('The event you are trying to add is the resolved path in Drupal as the event with name'), t('Adding path with same alias should fail. This test should pass.'), 'FBTrkPx');
  }

  /**
   * Test path items using pages routed via menu router.
   *
   * This will apply to views, custom modules, panels, etc.
   */
  public function testFacebookTrackingPixelPathItemRouter() {
    // Test to add a path item to a menu router path item.
    // We are going to use a path that is available in any Drupal installation.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'admin';
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[addtocart]'] = TRUE;
    $edit['event_type[lead]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('Path tracking entry added.'), t('Path tracking text confirmation on page displayed after form submit. Path name %name added', ['%name' => $edit['event_name']]), 'FBTrkPx');

    // Attemp to submit another item using the same menu router path.
    $edit = [];
    $edit['event_name'] = $this->randomName(8);
    $edit['event_path'] = 'admin';
    $edit['event_base_code_id'] = $this->basecodeid;
    $edit['event_type[search]'] = TRUE;
    $edit['event_type[registration]'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel/path/add', $edit, t('Save'));
    $this->assertText(t('You cannot add a duplicate event to the same path and base code.'), t('A duplicate menu router item was not allowed to be submitted'), 'FBTrkPx');

  }

  public function testFacebookTrackingPixelTrackPages() {
    // Test Basecode ID that is not global
    db_insert('facebook_tracking_pixel_base_codes')
      ->fields([
        'base_code_name' => 'Test Basecode',
        'base_code_fbid' => '890890890890',
        'base_code_global' => 0,
        'weight' => 10,
      ])
      ->execute();

    // Turn on tracking for roles
    $edit = [];
    $edit['facebook_tracking_pixel_roles_administrator'] = TRUE;
    $edit['facebook_tracking_pixel_roles_anonymous_user'] = TRUE;
    $edit['facebook_tracking_pixel_roles_authenticated_user'] = TRUE;
    $this->drupalPost('admin/config/system/facebook_tracking_pixel', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Save the settings to track all roles.'), 'FBTrkPx');

    // Load the front page and check for the global code
    $this->drupalGet('');

    $this->assertRaw('facebook_tracking_pixel/fb_tkpx.' . $this->basecodefbid  . '.js', t('Global tracking code JS found in head.'), 'FBTrkPx');
    $this->assertNoRaw('facebook_tracking_pixel/fb_tkpx.890890890890.js', t('Non-global tracking code JS not found in head.'), 'FBTrkPx');

  }
}
