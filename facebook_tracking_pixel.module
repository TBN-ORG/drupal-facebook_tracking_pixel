<?php

/**
 * @file facebook_tracking_pixel.module
 * Facebook Tracking Module.
 *
 * @author Brady Owens <info@fastglass.net>
 */

/**
 * Implements hook_menu().
 */
function facebook_tracking_pixel_menu() {
  $items = array();

  $items['admin/config/system/facebook_tracking_pixel'] = [
    'title' => 'Administer Facebook Tracking Pixel',
    'description' => 'Facebook Tracking pixel module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_settings_form'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/config/system/facebook_tracking_pixel/default'] = [
    'title' => 'Administer Facebook Tracking Pixel',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  ];
  $items['admin/config/system/facebook_tracking_pixel/base_codes'] = [
    'title' => 'Base Tracking Codes',
    'page arguments' => ['facebook_tracking_pixel_base_codes_form'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/system/facebook_tracking_pixel/base_codes/delete/%'] = [
    'title' => 'Delete a Base Code',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_base_codes_delete_form', 6],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.inc',
    'type' => MENU_CALLBACK,
  ];
  $items['admin/config/system/facebook_tracking_pixel/base_codes/edit/%'] = [
    'title' => 'Edit a Base Code',
    'page callback' => 'drupal_get_form',
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.inc',
    'page arguments' => ['facebook_tracking_pixel_base_codes_edit_form', 6],
    'type' => MENU_CALLBACK,
  ];
  $items['admin/config/system/facebook_tracking_pixel/purge'] = [
    'title' => 'Purge',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_form_purge'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/system/facebook_tracking_pixel/path'] = [
    'title' => 'Events by Path',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_track_by_path_form'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.path.inc',
    'type' => MENU_LOCAL_TASK,
  ];
  $items['admin/config/system/facebook_tracking_pixel/path/delete/%tid'] = [
    'title' => 'Delete an event',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_path_delete_form'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.path.inc',
    'type' => MENU_CONTEXT_NONE,
  ];
  $items['admin/config/system/facebook_tracking_pixel/path/edit/%tid'] = [
    'title' => 'Edit an event',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['facebook_tracking_pixel_path_edit_form'],
    'access arguments' => ['administer facebook tracking pixels'],
    'file' => 'facebook_tracking_pixel.admin.path.inc',
    'type' => MENU_CONTEXT_NONE,
  ];
  return $items;
}

/**
 * Implements hook_permission().
 */
function facebook_tracking_pixel_permission() {
  $permissions['administer facebook tracking pixels']['title'] = t('Administer Facebook Tracking Pixels.');
  return $permissions;
}

/**
 * Implements hook_page_build().
 */
function facebook_tracking_pixel_page_build(&$page) {

  // Pull base code IDs from database and build the noscript header includes.
  $result = db_select('facebook_tracking_pixel_base_codes', 'c')
    ->fields('c')
    ->orderBy('weight')
    ->execute()
    ->fetchAllAssoc('base_code_fbid');

  $path = variable_get('facebook_tracking_pixel_path', 'public://facebook_tracking_pixel');

  // Facebook static code.
  $fb_noscript_src = [
    '<noscript><img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=',
    '&ev=PageView&noscript=1"/></noscript>',
  ];
  if ($result) {
    $i = 0;
    foreach ($result as $element) {
      $file = $path . '/fb_tkpx.' . $element->base_code_fbid . '.js';

      $page['content']['#attached']['js']['facebook_tracking_pixel_' . $i] = array(
        'type' => 'file',
        'group' => JS_THEME,
        'data' => $file,
        'preprocess' => (bool) variable_get('facebook_tracking_pixel_aggregation', FALSE),
      );
      // Assemble code.
      $fb_base_code_nojs = $fb_noscript_src[0] . $element->base_code_fbid . $fb_noscript_src[1];
      drupal_add_html_head([
        '#type' => 'markup',
        '#markup' => $fb_base_code_nojs,
        '#weight' => 200 + $i,
      ], 'facebook_tracking_pixel_noscript_' . $i);
      $i++;
    }
  }
}

/**
 * Deletes all CSS & JavaScript from the file system or a single file.
 *
 * @param null $filename
 * @param null $subdir
 * @return bool
 */
function facebook_tracking_pixel_delete_file($filename = NULL, $subdir = NULL) {
  $path = variable_get('facebook_tracking_pixel_path', 'public://facebook_tracking_pixel');
  // Calling the function without a file name will delete everything.
  if ($filename == NULL) {
    if (!$files = file_scan_directory($path, '/.*\.js$/')) {
      foreach ($files as $key => $value) {
        file_unmanaged_delete($path . '/' . $key);
      }
      return TRUE;
    }
  }
  else {
    if(!empty($subdir)){
      $deletepath = $path . '/' . $subdir . '/' . $filename;
    }
    else {
      $deletepath = $path . '/' . $filename;
    }
    file_unmanaged_delete($deletepath);
    return TRUE;
  }
  return FALSE;
}

/**
 * Saves JavaScript in the file system (but only if not empty).
 *
 * @param $data
 * @param $filename
 * @param null $subdir
 * @return bool|null|string
 */
function facebook_tracking_pixel_save_file($data, $filename, $subdir = NULL) {
  if (!drupal_strlen(trim($data))) {
    return FALSE;
  }
  $path = variable_get('facebook_tracking_pixel_path', 'public://facebook_tracking_pixel');
  if (!empty($subdir)) {
    $path = $path . '/' . $subdir;
  }
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  $file_saved = file_unmanaged_save_data($data, $path . '/' . $filename, FILE_EXISTS_REPLACE);

  // Trigger reloading the CSS and JS file cache in AdvAgg, if available.
  if ($file_saved && module_exists('advagg')) {
    module_load_include('inc', 'advagg', 'advagg.cache');
    advagg_push_new_changes();
  }
  // Clear JS cache.
  drupal_clear_js_cache();
  return $file_saved;
}

/**
 * Remove a base code by the FBID number.
 *
 * @param int $tid
 * @param int $fbid
 * @return bool
 */
function facebook_tracking_pixel_base_code_delete($tid, $fbid) {
  $status = TRUE;
  // Remove JS file.
  $filename = 'fb_tkpx.' . $fbid . '.js';
  $filedelete = facebook_tracking_pixel_delete_file($filename);
  if (!$filedelete) {
    $status = FALSE;
  }
  if (!$status) {
    drupal_set_message(t('Failed to delete base code file.'), 'error', FALSE);
  }
  // Remove base code from database.
  if (!db_delete('facebook_tracking_pixel_base_codes')
    ->condition('base_code_id', $tid, '=')
    ->execute()
  ) {
    $status = FALSE;
  }

  if (!$status) {
    drupal_set_message(t('Failed to remove base code from database.'), 'error', FALSE);
  }

  if (!$status) {
    drupal_set_message(t('Check your PHP server logs.'), 'error', FALSE);
  }
  else {
    drupal_set_message(t('Base code deleted.'), 'status', FALSE);
  }
  // Trigger reloading the CSS and JS file cache in AdvAgg, if available.
  if ($filedelete && module_exists('advagg')) {
    module_load_include('inc', 'advagg', 'advagg.cache');
    advagg_push_new_changes();
  }
  elseif ($filedelete) {
    // Clear JS cache.
    drupal_clear_js_cache();
  }
  return $status;
}

/**
 * Return keyed array of standard events.
 *
 * @return array
 */

function facebook_tracking_pixel_events() {
  $events = [];
  $events['pageview'] = [
    'name' => t('Key Page View'),
    'code' => 'fbq(\'track\', \'ViewContent\');'
  ];
  $events['search'] = [
    'name' => t('Search'),
    'code' => 'fbq(\'track\', \'Search\');'
  ];
  $events['addtocart'] = [
    'name' => t('Add to Cart'),
    'code' => 'fbq(\'track\', \'AddToCart\');'
  ];
  $events['addtowish'] = [
    'name' => t('Add to Wishlist'),
    'code' => 'fbq(\'track\', \'AddToWishlist\');'
  ];
  $events['checkoutstart'] = [
    'name' => t('Initiate checkout'),
    'code' => 'fbq(\'track\', \'InitiateCheckout\');'
  ];
  $events['addpayment'] = [
    'name' => t('Add Payment Info'),
    'code' => 'fbq(\'track\', \'AddPaymentInfo\')'
  ];
  $events['lead'] = [
    'name' => t('Lead'),
    'code' => 'fbq(\'track\', \'Lead\');'
  ];
  $events['registration'] = [
    'name' => t('Complete Registration'),
    'code' => 'fbq(\'track\', \'CompleteRegistration\');'
  ];
  return $events;
}

/**
 * Return keyed array of standard events in a format for select boxes.
 *
 * @return array
 */

function facebook_tracking_pixel_events_options() {
  $events = [];
  $events['pageview'] = t('Key Page View');
  $events['search'] = t('Search');
  $events['addtocart'] = t('Add to Cart');
  $events['addtowish'] = t('Add to Wishlist');
  $events['checkoutstart'] = t('Initiate checkout');
  $events['addpayment'] = t('Add Payment Info');
  $events['lead'] = t('Lead');
  $events['registration'] = t('Complete Registration');
  return $events;
}

/**
 * Implements hook_theme().
 */
function facebook_tracking_pixel_theme() {
  return [
    'facebook_tracking_pixel_base_codes_form' => [
      'render element' => 'form',
      'file' => 'facebook_tracking_pixel.admin.inc',
    ],
    'facebook_tracking_pixel_track_by_path_form' => [
      'render element' => 'form',
      'file' => 'facebook_tracking_pixel.admin.path.inc'
    ],
  ];
}

/**
 * Returns the pieces of the FB tracking JS script.
 * @return array
 */

function facebook_tracking_pixel_base_code_js() {
  $fb_script_src = [];
  $fb_script_src = [
    '!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
    n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
    n.push=n;n.loaded=!0;n.version=\'2.0\';n.queue=[];t=b.createElement(e);t.async=!0;
    t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
    document,\'script\',\'//connect.facebook.net/en_US/fbevents.js\');
    fbq(\'init\', \'',
    '\');fbq(\'track\', "PageView");',
  ];
  return $fb_script_src;
}
